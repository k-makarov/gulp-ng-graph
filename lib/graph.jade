doctype html
html
	head
		style.
			.link { stroke: #999; stroke-opacity: .6 }
			.node > text { fill: #000; font: 10px sans-serif; pointer-events: none; text-shadow: 1px 1px 0px #fff; }
			html, body, #graph { height: 100% }
	body
		div#graph
		script(src='http://d3js.org/d3.v3.min.js')
		script.
			var graph = JSON.parse('!{model.graph}');
			var color = d3.scale.category20();
			var visual = d3.select(document.body).select('#graph')
				.append('svg:svg')
					.attr('width', '100%')
					.attr('height', '98%')
					.attr('pointer-events', 'all')
				.append('svg:g')
					.call(d3.behavior.zoom().on('zoom', redraw))
				.append('svg:g');
			visual.append('svg:rect')
				.attr('width', '100%')
				.attr('height', '98%')
				.attr('fill', 'white');
			visual.append('svg:marker')
				.attr('id', 'link-marker')
				.attr('viewBox', '0 -5 10 10')
			    .attr('refX', 21)
			    .attr('refY', 0)
			    .attr('markerWidth', 4)
			    .attr('markerHeight', 6)
			    .attr('orient', 'auto')
			  .append('svg:path')
			    .attr('d', 'M0,-5L10,0L0,5')
			    .attr('stroke', 'white');
			function redraw() {
				visual.attr('transform', 'translate(' + d3.event.translate + ')'+ ' scale(' + d3.event.scale + ')');
			}
			var draw = function(graph) {
				var force = d3.layout.force()
			    	.charge(-(graph.nodes.length * (graph.links.length || 1)))
			    	.linkDistance((Math.round(Math.sqrt(graph.links.length)) * 25))
			    	.size([window.innerWidth, window.innerHeight]);
				force
			    	.nodes(graph.nodes)
			    	.links(graph.links)
			    	.start();
				var link = visual.selectAll('.link')
			    	.data(graph.links)
			    	.enter().append('line')
			    	.attr('class', 'link')
			    	.attr('marker-end', 'url(#link-marker)')
			    	.attr('stroke-width', '2px')
			    	//- .style('stroke-width', function(d) {
			     //-    	return Math.sqrt(d.value);
			    	//- });
			 	
				var node = visual.selectAll('.node')
			    	.data(graph.nodes)
			    	.enter().append('g')
			    	.attr('class', 'node')
			    	.call(force.drag);
			    node.append('circle')
			    	.attr('r', 10)
			    	.style('fill', function(d,i){return color(i);});
				node.append('title')
			    	.text(function(d) { return d.name; });
			    node.append('text')
			    	.attr('x', 12)
			    	.attr('dy', '.35em')
			    	.text(function(d) { return d.name; });
			  	force.on('tick', function() {
			    	link.attr('x1', function(d) { return d.source.x; })
			        	.attr('y1', function(d) { return d.source.y; })
			        	.attr('x2', function(d) { return d.target.x; })
			        	.attr('y2', function(d) { return d.target.y; });
			    	node.attr('transform', function(d) {return 'translate(' + d.x + ',' + d.y + ')'; });
			  	});
			}
			draw(graph);
